(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var o=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===o?new Date(t.getTime()):"number"==typeof t||"[object Number]"===o?new Date(t):("string"!=typeof t&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(o){e(1,arguments);var r=t(o);return r.setHours(0,0,0,0),r}function r(t,r){e(2,arguments);var n=o(t),c=o(r);return n.getTime()===c.getTime()}function n(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function c(o,r){e(1,arguments);var c=r||{},a=c.locale,i=a&&a.options&&a.options.weekStartsOn,u=null==i?0:n(i),s=null==c.weekStartsOn?u:n(c.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=t(o),d=l.getDay(),p=(d<s?7:0)+d-s;return l.setDate(l.getDate()-p),l.setHours(0,0,0,0),l}function a(t,o,r){e(2,arguments);var n=c(t,r),a=c(o,r);return n.getTime()===a.getTime()}function i(e){const t=JSON.stringify(e);localStorage.setItem("project",t)}const u=function(){const e=function(){const e=localStorage.getItem("project");return e?JSON.parse(e):null}();return e||{inbox:[]}}(),s=function(e){u[e]=[],i(u)},l=function(e){delete u[e],i(u)},d=function(e,t,o,r,n){const c=function(e,t,o,r){return{title:e,description:t,dueDate:o,priority:r}}(t,o,r,n);u[e].push(c),i(u)},p=function(e,t){u[e].splice(t,1),i(u)},y=function(){return u},m=function(e){return u[e]},f=function(e,t,o,r){const n=u[e][t];n.dueDate=o,n.priority=r,i(u)},j=function(){const t={...u};return Object.keys(t).forEach((o=>{const n=t[o].map((t=>function(t){return e(1,arguments),r(t,Date.now())}(new Date(t.dueDate))?t:""));t[o]=n})),t},S=function(){const t={...u};return Object.keys(t).forEach((o=>{const r=t[o].map((t=>function(t,o){return e(1,arguments),a(t,Date.now(),o)}(new Date(t.dueDate))?t:""));t[o]=r})),t},b=function(e){const t=Object.keys(u);return["Daily","Daily Projects","This Week","Weekly Projects","inbox"].concat(t).includes(e)};function q(e){const t=document.querySelector(".card-template").content.cloneNode(!0).querySelector(".card");return t.querySelector(".title").textContent=e.title,t.querySelector(".date").textContent=e.dueDate,t.querySelector(".priority").textContent=e.priority,t}function v(e,t){document.querySelectorAll(e).forEach((e=>{e.addEventListener("click",t)}))}function g(){document.querySelectorAll(".form-wrapper").forEach((e=>{e.classList.add("hidden")}))}function D(e){const t=document.querySelector(".todo-form"),o=e.target.getAttribute("data-project");t.querySelector(".todo-form-title").textContent=o,document.querySelector(".n-todo").classList.remove("hidden")}function h(e){const t=document.querySelector(".edit-todo-form");t.querySelector("#index").value=e.target.getAttribute("data-index"),t.querySelector("#project").value=e.target.getAttribute("data-project"),document.querySelector(".e-todo").classList.remove("hidden")}v(".new-project",(function(){document.querySelector(".n-project").classList.remove("hidden")})),document.querySelectorAll(".cancel").forEach((e=>{e.addEventListener("click",(()=>{g()}))}));const x={populateProjectDisplay:function(e,t){const o=document.querySelector(".display");o.textContent="",document.querySelector(".project-name").textContent=e,t.forEach(((t,r)=>{const n=q(t);n.querySelector(".remove").setAttribute("data-project",e),n.querySelector(".remove").setAttribute("data-index",r),n.querySelector(".edit").setAttribute("data-project",e),n.querySelector(".edit").setAttribute("data-index",r),o.appendChild(n)}));const r=document.createElement("button");r.classList.add("new-todo"),r.setAttribute("data-project",e),r.textContent="Add new Todo",r.addEventListener("click",D),v(".edit",h),o.appendChild(r)},populateSidebar:function(e){const t=document.querySelector(".projects");t.textContent="",e.forEach((e=>{if("inbox"===e)return;const o=document.createElement("div");o.classList.add("project-tab"),o.setAttribute("data-project",e);const r=document.createElement("p");r.textContent=e;const n=document.createElement("button");n.textContent="X",n.setAttribute("data-project",e),n.classList.add("delete-project"),o.appendChild(r),o.appendChild(n),t.appendChild(o)}))},addListener:v,populateTimedDisplay:function(e,t){const o=document.querySelector(".display");o.textContent="",document.querySelector(".project-name").textContent=t,Object.keys(e).forEach((t=>{e[t].forEach(((e,r)=>{if(""===e)return;const n=q(e);n.querySelector(".remove").setAttribute("data-project",t),n.querySelector(".remove").setAttribute("data-index",r),n.querySelector(".edit").setAttribute("data-project",t),n.querySelector(".edit").setAttribute("data-index",r),o.appendChild(n)}))})),v(".edit",h)},hideAllForms:g},L=document.querySelector(".inbox"),k=document.querySelector(".today"),A=document.querySelector(".week");function w(e){const t=e.target.getAttribute("data-project"),o=e.target.getAttribute("data-index");p(t,o);const r=document.querySelector(".project-name").textContent;if("Daily Projects"===r){const e=j();x.populateTimedDisplay(e,"Daily Projects")}else if("Weekly Projects"===r){const e=S();x.populateTimedDisplay(e,"Weekly Projects")}else{const e=m(t);x.populateProjectDisplay(t,e)}x.addListener(".remove",w)}function E(e){const t=e.target.getAttribute("data-project"),o=m(t);o&&(x.populateProjectDisplay(t,o),x.addListener(".remove",w))}function C(){const e=m("inbox");x.populateProjectDisplay("inbox",e),x.addListener(".remove",w)}function P(e){const t=e.target.getAttribute("data-project");l(t),x.populateSidebar(Object.keys(y())),x.addListener(".delete-project",P),x.addListener(".project-tab",E);const o=m("inbox");x.populateProjectDisplay("inbox",o),x.addListener(".remove",w)}k.addEventListener("click",(()=>{const e=j();x.populateTimedDisplay(e,"Daily Projects"),x.addListener(".remove",w)})),A.addEventListener("click",(()=>{const e=S();x.populateTimedDisplay(e,"Weekly Projects"),x.addListener(".remove",w)})),L.addEventListener("click",C),document.querySelector(".project-form").addEventListener("submit",(function(e){e.preventDefault();const t=document.querySelector("#project-name").value;b(t)?alert("Projects Name cannot be the Same!"):(s(t),x.populateSidebar(Object.keys(y())),x.addListener(".delete-project",P),x.addListener(".project-tab",E),e.target.reset(),x.hideAllForms())})),document.querySelector(".todo-form").addEventListener("submit",(function(e){e.preventDefault();const t=e.target,o=t.querySelector(".todo-form-title").textContent,r=t.querySelector("#title").value,n=t.querySelector("#date").value,c=t.querySelector("#priority").value;d(o,r,"lol",n,c);const a=m(o);x.populateProjectDisplay(o,a),x.addListener(".remove",w),e.target.reset(),x.hideAllForms()})),document.querySelector(".edit-todo-form").addEventListener("submit",(function(e){e.preventDefault();const t=e.target.querySelector("#date").value,o=e.target.querySelector("#priority").value,r=e.target.querySelector("#project").value,n=e.target.querySelector("#index").value;f(r,n,t,o);const c=document.querySelector(".project-name").textContent;if("Daily Projects"===c){const e=j();x.populateTimedDisplay(e,"Daily Projects")}else if("Weekly Projects"===c){const e=S();x.populateTimedDisplay(e,"Weekly Projects")}else{const e=m(r);x.populateProjectDisplay(r,e)}x.addListener(".remove",w),e.target.reset(),x.hideAllForms()})),C(),x.populateSidebar(Object.keys(y())),x.addListener(".delete-project",P),x.addListener(".project-tab",E)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,