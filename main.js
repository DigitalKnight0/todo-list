(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var o=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===o?new Date(t.getTime()):"number"==typeof t||"[object Number]"===o?new Date(t):("string"!=typeof t&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(o){e(1,arguments);var r=t(o);return r.setHours(0,0,0,0),r}function r(t,r){e(2,arguments);var n=o(t),c=o(r);return n.getTime()===c.getTime()}function n(t){return e(1,arguments),r(t,Date.now())}function c(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function a(o,r){e(1,arguments);var n=r||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,u=null==i?0:c(i),s=null==n.weekStartsOn?u:c(n.weekStartsOn);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=t(o),d=l.getDay(),p=(d<s?7:0)+d-s;return l.setDate(l.getDate()-p),l.setHours(0,0,0,0),l}function i(t,o,r){e(2,arguments);var n=a(t,r),c=a(o,r);return n.getTime()===c.getTime()}function u(t,o){return e(1,arguments),i(t,Date.now(),o)}function s(e){const t=JSON.stringify(e);localStorage.setItem("project",t)}const l=function(){const e=function(){const e=localStorage.getItem("project");return e?JSON.parse(e):null}();return e||{inbox:[]}}(),d=function(e){l[e]=[],s(l)},p=function(e){delete l[e],s(l)},y=function(e,t,o,r,n){const c=function(e,t,o,r){return{title:e,description:t,dueDate:o,priority:r}}(t,o,r,n);l[e].push(c),s(l)},m=function(e,t){l[e].splice(t,1),s(l)},f=function(){return l},j=function(e){return l[e]},S=function(e,t,o,r){const n=l[e][t];n.dueDate=o,n.priority=r,s(l)},b=function(){const e=Object.assign({},l);for(const t in e){const o=e[t].map((e=>n(new Date(e.dueDate))?e:""));e[t]=o}return e},g=function(){const e=Object.assign({},l);for(const t in e){const o=e[t].map((e=>u(new Date(e.dueDate))?e:""));e[t]=o}return e},q=function(e){const t=Object.keys(l);return["Daily","Daily Projects","This Week","Weekly Projects","inbox"].concat(t).includes(e)};function v(e){const t=document.querySelector(".card-template").content.cloneNode(!0).querySelector(".card");return t.querySelector(".title").textContent=e.title,t.querySelector(".date").textContent=e.dueDate,t.querySelector(".priority").textContent=e.priority,t}function D(e,t){document.querySelectorAll(e).forEach((e=>{e.addEventListener("click",t)}))}function h(e){const t=document.querySelector(".todo-form"),o=e.target.getAttribute("data-project");t.querySelector(".todo-form-title").textContent=o,document.querySelector(".n-todo").classList.remove("hidden")}function x(e){const t=document.querySelector(".edit-todo-form");t.querySelector("#index").value=e.target.getAttribute("data-index"),t.querySelector("#project").value=e.target.getAttribute("data-project"),document.querySelector(".e-todo").classList.remove("hidden")}function L(){document.querySelectorAll(".form-wrapper").forEach((e=>{e.classList.add("hidden")}))}D(".new-project",(function(){document.querySelector(".n-project").classList.remove("hidden")})),document.querySelectorAll(".cancel").forEach((e=>{e.addEventListener("click",(e=>{L()}))}));const A={populateProjectDisplay:function(e,t){const o=document.querySelector(".display");o.textContent="",document.querySelector(".project-name").textContent=e,t.forEach(((t,r)=>{const n=v(t);n.querySelector(".remove").setAttribute("data-project",e),n.querySelector(".remove").setAttribute("data-index",r),n.querySelector(".edit").setAttribute("data-project",e),n.querySelector(".edit").setAttribute("data-index",r),o.appendChild(n)}));const r=document.createElement("button");r.classList.add("new-todo"),r.setAttribute("data-project",e),r.textContent="Add new Todo",r.addEventListener("click",h),D(".edit",x),o.appendChild(r)},populateSidebar:function(e){const t=document.querySelector(".projects");t.textContent="",e.forEach((e=>{if("inbox"===e)return;const o=document.createElement("div");o.classList.add("project-tab"),o.setAttribute("data-project",e);const r=document.createElement("p");r.textContent=e;const n=document.createElement("button");n.textContent="X",n.setAttribute("data-project",e),n.classList.add("delete-project"),o.appendChild(r),o.appendChild(n),t.appendChild(o)}))},addListener:D,populateTimedDisplay:function(e,t){const o=document.querySelector(".display");o.textContent="",document.querySelector(".project-name").textContent=t;for(const t in e)e[t].forEach(((e,r)=>{if(""===e)return;const n=v(e);n.querySelector(".remove").setAttribute("data-project",t),n.querySelector(".remove").setAttribute("data-index",r),n.querySelector(".edit").setAttribute("data-project",t),n.querySelector(".edit").setAttribute("data-index",r),o.appendChild(n)}));D(".edit",x)},hideAllForms:L},w=document.querySelector(".inbox"),k=document.querySelector(".today"),E=document.querySelector(".week");function C(){const e=j("inbox");A.populateProjectDisplay("inbox",e),A.addListener(".remove",O)}function P(e){const t=e.target.getAttribute("data-project");p(t),A.populateSidebar(Object.keys(f())),A.addListener(".delete-project",P),A.addListener(".project-tab",T);const o=j("inbox");A.populateProjectDisplay("inbox",o),A.addListener(".remove",O)}function T(e){const t=e.target.getAttribute("data-project"),o=j(t);o&&(A.populateProjectDisplay(t,o),A.addListener(".remove",O))}function O(e){const t=e.target.getAttribute("data-project"),o=e.target.getAttribute("data-index");m(t,o);const r=document.querySelector(".project-name").textContent;if("Daily Projects"===r){const e=b();A.populateTimedDisplay(e,"Daily Projects")}else if("Weekly Projects"===r){const e=g();A.populateTimedDisplay(e,"Weekly Projects")}else{const e=j(t);A.populateProjectDisplay(t,e)}A.addListener(".remove",O)}k.addEventListener("click",(()=>{const e=b();A.populateTimedDisplay(e,"Daily Projects"),A.addListener(".remove",O)})),E.addEventListener("click",(()=>{const e=g();A.populateTimedDisplay(e,"Weekly Projects"),A.addListener(".remove",O)})),w.addEventListener("click",C),document.querySelector(".project-form").addEventListener("submit",(function(e){e.preventDefault();const t=document.querySelector("#project-name").value;q(t)?alert("Projects Name cannot be the Same!"):(d(t),A.populateSidebar(Object.keys(f())),A.addListener(".delete-project",P),A.addListener(".project-tab",T),e.target.reset(),A.hideAllForms())})),document.querySelector(".todo-form").addEventListener("submit",(function(e){e.preventDefault();const t=e.target,o=t.querySelector(".todo-form-title").textContent,r=t.querySelector("#title").value,n=t.querySelector("#date").value,c=t.querySelector("#priority").value;y(o,r,"lol",n,c);const a=j(o);A.populateProjectDisplay(o,a),A.addListener(".remove",O),e.target.reset(),A.hideAllForms()})),document.querySelector(".edit-todo-form").addEventListener("submit",(function(e){e.preventDefault();const t=e.target.querySelector("#date").value,o=e.target.querySelector("#priority").value,r=e.target.querySelector("#project").value,n=e.target.querySelector("#index").value;S(r,n,t,o);const c=document.querySelector(".project-name").textContent;if("Daily Projects"===c){const e=b();A.populateTimedDisplay(e,"Daily Projects")}else if("Weekly Projects"===c){const e=g();A.populateTimedDisplay(e,"Weekly Projects")}else{const e=j(r);A.populateProjectDisplay(r,e)}A.addListener(".remove",O),e.target.reset(),A.hideAllForms()})),C(),A.populateSidebar(Object.keys(f())),A.addListener(".delete-project",P),A.addListener(".project-tab",T)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,